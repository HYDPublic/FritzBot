Alle Befehle müssen im namensraum FritzBot.commands liegen und das Interface ICommand implementieren, dazu siehe die schablone
Im Name Array kann der befehlsname festgelegt werden die dem Kommando zugeordnet werden !example !beispiel
Im HelpText wird ein Hilfetext hinterlegt der durch !help example abgerufen werden kann
OpNeeded gibt an ob es sich um einen Administrativen Befehl handelt der nur bestimmten Nutzern zugänglich ist
ParameterNeeded gibt an ob ein Parameter erforderlich ist oder nicht,
wird ein parameter angegeben obwohl keiner erforderlich ist oder es wid kein parameter angegeben obwohl ein parameter erforderlich ist, wird der Hilfetext angezeigt.
AcceptEveryParam setzt vorherige Logik außer Kraft und akzeptiert mehrere oder keinen Parameter
Im Klassen Konstruktor können Threads gestartet werden oder initial Werte festgelegt werden
Die Run Methode wird ausgeführt wenn jemand den Befehl aufruft: !example z.b.
	der Parameter vom Typ ircMessage bietet viele Hilfreiche Methoden wie z.b. Answer um dem Benutzer zu antworten. Die Befehle sind alle via IntelliSense dokumentiert
Die Destruct Methode wird ausgeführt, wenn der Befehl entladen oder deaktiviert wird. Wenn Threads gestartet wurden sollten diese dort beendet werden.

namespace FritzBot.commands
{
    class example : ICommand
    {
        public String[] Name { get { return new String[] { "example", "beispiel" }; } }
        public String HelpText { get { return "example description"; } }
        public Boolean OpNeeded { get { return false; } }
        public Boolean ParameterNeeded { get { return false; } }
        public Boolean AcceptEveryParam { get { return true; } }

		public example()
		{

		}

        public void Destruct()
        {

        }

        public void Run(ircMessage theMessage)
        {
            theMessage.Answer("Hallo Welt");
        }
    }
}